{
  "version": 3,
  "sources": ["../src/templates.js", "../src/expressions.js", "../src/directives.js", "../src/render.js"],
  "sourcesContent": ["/**\n * resolve the template to render\n *\n * @param {object} context the rendering context\n * @returns {Promise<Element>} the template element\n */\nexport default async function resolveTemplate(context) {\n  context.template = context.template || {};\n  context.template.path = context.template.path || `${context.codeBasePath}/blocks/${context.blockName}/${context.blockName}.html`;\n\n  const templateId = `faintly-template-${context.template.path}#${context.template.name || ''}`.toLowerCase().replace(/[^0-9a-z]/gi, '-');\n  let template = document.getElementById(templateId);\n  if (!template) {\n    const resp = await fetch(context.template.path);\n    if (!resp.ok) throw new Error(`Failed to fetch template from ${context.template.path} for block ${context.blockName}.`);\n\n    const markup = await resp.text();\n\n    const dp = new DOMParser();\n    const templateDom = dp.parseFromString(markup, 'text/html');\n\n    templateDom.querySelectorAll('template').forEach((t) => {\n      const name = t.getAttribute('data-fly-name') || '';\n      t.id = `faintly-template-${context.template.path}#${name}`.toLowerCase().replace(/[^0-9a-z]/gi, '-');\n\n      document.body.append(t);\n    });\n  }\n\n  template = document.getElementById(templateId);\n  if (!template) throw new Error(`Failed to find template with id ${templateId}.`);\n\n  return template;\n}\n", "/**\n * resolves and returns data from the rendering context\n *\n * @param {string} expression the name of the data\n * @param {Object} context the rendering context\n * @returns {Promise<any>} the data that was resolved\n */\nexport async function resolveExpression(expression, context) {\n  let resolved = context;\n  let previousResolvedValue;\n\n  const parts = expression.split('.');\n  for (let i = 0; i < parts.length; i += 1) {\n    if (typeof resolved === 'undefined') break;\n\n    const part = parts[i];\n    previousResolvedValue = resolved;\n    resolved = resolved[part];\n\n    if (typeof resolved === 'function') {\n      const functionParams = [{ ...context }];\n      // eslint-disable-next-line no-await-in-loop\n      resolved = await resolved.apply(previousResolvedValue, functionParams);\n    }\n  }\n\n  return resolved;\n}\n\n/**\n * resolves expressions in a string\n *\n * @param {string} str the string that may contain expressions\n * @param {Object} context the rendering context\n */\nexport async function resolveExpressions(str, context) {\n  const regexp = /(\\\\)?\\${([a-z0-9\\\\.\\s]+)}/dgi;\n\n  const promises = [];\n  str.replaceAll(regexp, (match, escapeChar, expression) => {\n    if (escapeChar) {\n      promises.push(Promise.resolve(match.slice(1)));\n    }\n\n    promises.push(resolveExpression(expression.trim(), context));\n\n    return match;\n  });\n\n  if (promises.length > 0) {\n    const promiseResults = await Promise.all(promises);\n    const updatedText = str.replaceAll(regexp, () => {\n      const result = promiseResults.shift();\n      return result;\n    });\n\n    return { updated: true, updatedText };\n  }\n\n  return { updated: false, updatedText: str };\n}\n\n/**\n * process text expressions within a text node, updating the node's textContent\n *\n * @param {Node} node the text node\n * @param {Object} context the rendering context\n */\nexport async function processTextExpressions(node, context) {\n  const { updated, updatedText } = await resolveExpressions(node.textContent, context);\n\n  if (updated) node.textContent = updatedText;\n}\n", "import { resolveExpression, resolveExpressions } from './expressions.js';\nimport { processNode, renderElement } from './render.js';\n\nasync function processAttributesDirective(el, context) {\n  if (!el.hasAttribute('data-fly-attributes')) return;\n\n  const attrsExpression = el.getAttribute('data-fly-attributes');\n  const attrsData = await resolveExpression(attrsExpression, context);\n\n  el.removeAttribute('data-fly-attributes');\n  if (attrsData) {\n    Object.entries(attrsData).forEach(([k, v]) => {\n      if (v === undefined) {\n        el.removeAttribute(k);\n      } else {\n        el.setAttribute(k, v);\n      }\n    });\n  }\n}\n\n/**\n * process the attributes directive, as well as any expressions in non `data-fly-*` attributes\n *\n * @param {Element} el the element to process\n * @param {Object} context the rendering context\n */\nexport async function processAttributes(el, context) {\n  processAttributesDirective(el, context);\n\n  const attrPromises = el.getAttributeNames()\n    .filter((attrName) => !attrName.startsWith('data-fly-'))\n    .map(async (attrName) => {\n      const { updated, updatedText } = await resolveExpressions(el.getAttribute(attrName), context);\n      if (updated) el.setAttribute(attrName, updatedText);\n    });\n  await Promise.all(attrPromises);\n}\n\n/**\n * processes the test directive\n *\n * @param {Element} el the element to process\n * @param {Object} context the rendering context\n * @returns {Promise<boolean>} indicator if node should be rendered\n */\nexport async function processTest(el, context) {\n  const testAttrName = el.getAttributeNames().find((attrName) => attrName.startsWith('data-fly-test') || attrName.startsWith('data-fly-not'));\n  if (!testAttrName) return true;\n\n  const nameParts = testAttrName.split('.');\n  const contextName = nameParts[1] || '';\n\n  const testExpression = el.getAttribute(testAttrName);\n  const testData = await resolveExpression(testExpression, context);\n\n  el.removeAttribute(testAttrName);\n\n  const testResult = testAttrName.startsWith('data-fly-not') ? !testData : !!testData;\n\n  if (contextName) context[contextName.toLowerCase()] = testResult;\n\n  if (!testResult) {\n    el.remove();\n  }\n\n  return testResult;\n}\n\n/**\n * process the content directive\n *\n * @param {Element} el the element to process\n * @param {Object} context the rendering context\n * @returns {Promise<Boolean>} if there was a content directive\n */\nexport async function processContent(el, context) {\n  if (!el.hasAttribute('data-fly-content')) return false;\n\n  const contentExpression = el.getAttribute('data-fly-content');\n  const content = await resolveExpression(contentExpression, context);\n\n  el.removeAttribute('data-fly-content');\n\n  if (content !== undefined) {\n    if (content instanceof Node) {\n      el.replaceChildren(content);\n    } else if (Array.isArray(content)\n        || content instanceof NodeList || content instanceof HTMLCollection) {\n      el.replaceChildren(...content);\n    } else {\n      const textNode = document.createTextNode(content);\n      el.replaceChildren(textNode);\n    }\n  } else {\n    el.textContent = '';\n  }\n\n  return true;\n}\n\n/**\n * processes the repeat directive\n *\n * @param {Element} el the element to potentially be repeated\n * @param {Object} context the rendering context\n * @returns {Promise<Boolean>} if the node was repeated\n * the net number of nodes added/removed as a result of the repeat directive\n */\nexport async function processRepeat(el, context) {\n  const repeatAttrName = el.getAttributeNames().find((attrName) => attrName.startsWith('data-fly-repeat'));\n  if (!repeatAttrName) return false;\n\n  const nameParts = repeatAttrName.split('.');\n  const contextName = nameParts[1] || 'item';\n\n  const repeatExpression = el.getAttribute(repeatAttrName);\n  const arr = await resolveExpression(repeatExpression, context);\n  if (!arr || Object.keys(arr).length === 0) {\n    el.remove();\n    return true;\n  }\n\n  el.removeAttribute(repeatAttrName);\n  const repeatedNodes = await Promise.all(Object.entries(arr).map(async ([key, item], i) => {\n    const cloned = el.cloneNode(true);\n\n    const repeatContext = { ...context };\n    repeatContext[contextName.toLowerCase()] = item;\n    repeatContext[`${contextName.toLowerCase()}Index`] = i;\n    repeatContext[`${contextName.toLowerCase()}Number`] = i + 1;\n    repeatContext[`${contextName.toLowerCase()}Key`] = key;\n\n    // eslint-disable-next-line no-use-before-define\n    await processNode(cloned, repeatContext);\n\n    return cloned;\n  }));\n\n  let afterEL = el;\n  repeatedNodes.forEach((node) => {\n    afterEL.after(node);\n    afterEL = node;\n  });\n\n  el.remove();\n\n  return true;\n}\n\n/**\n * process the include directive\n *\n * @param {Element} el the element to process\n * @param {Object} context the rendering context\n * @returns {Promise<Boolean>} if there was a include directive\n */\nexport async function processInclude(el, context) {\n  if (!el.hasAttribute('data-fly-include')) return false;\n\n  const includeValue = el.getAttribute('data-fly-include');\n  el.removeAttribute('data-fly-include');\n  const { updatedText } = await resolveExpressions(includeValue, context);\n\n  let templatePath = context.template ? context.template.path : '';\n  let templateName = updatedText;\n  if (templateName.startsWith('/')) {\n    const [path, name] = templateName.split('#');\n    templatePath = path;\n    templateName = name;\n  }\n\n  const includeContext = {\n    ...context,\n    template: {\n      name: templateName,\n      path: templatePath,\n    },\n  };\n\n  await renderElement(el, includeContext);\n\n  return true;\n}\n\n/**\n * process the unwrap directive, leavving the attribute only if it resolves to true\n *\n * @param {Element} el the element to process\n * @param {Object} context the rendering context\n * @returns {Promise<void>}\n */\nexport async function resolveUnwrap(el, context) {\n  if (!el.hasAttribute('data-fly-unwrap')) return;\n\n  const unwrapExpression = el.getAttribute('data-fly-unwrap');\n  if (unwrapExpression) {\n    const unwrapVal = !!(await resolveExpression(unwrapExpression, context));\n\n    if (!unwrapVal) {\n      el.removeAttribute('data-fly-unwrap');\n    }\n  }\n}\n\nexport function processUnwraps(el) {\n  el.querySelectorAll('[data-fly-unwrap]').forEach((unwrapEl) => {\n    unwrapEl.before(...unwrapEl.childNodes);\n    unwrapEl.remove();\n  });\n}\n", "import resolveTemplate from './templates.js';\nimport { processTextExpressions } from './expressions.js';\nimport {\n  processAttributes,\n  processContent,\n  processInclude,\n  processRepeat,\n  processTest,\n  processUnwraps,\n  resolveUnwrap,\n} from './directives.js';\n\n/**\n * recursively renders a dom node, processing all directives\n *\n * @param {Node} node the node to render\n * @param {Object} context the rendering context\n * @returns {Promise<void>} a promise that resolves when the node has been rendered\n */\nexport async function processNode(node, context) {\n  context.currentNode = node;\n  let processChildren = [Node.ELEMENT_NODE, Node.DOCUMENT_FRAGMENT_NODE].includes(node.nodeType);\n  if (node.nodeType === Node.ELEMENT_NODE) {\n    const shouldRender = await processTest(node, context);\n    if (!shouldRender) return;\n\n    const repeated = await processRepeat(node, context);\n    if (repeated) return;\n\n    await processAttributes(node, context);\n\n    processChildren = (await processContent(node, context))\n      || (await processInclude(node, context)) || true;\n\n    await resolveUnwrap(node, context);\n  } else if (node.nodeType === Node.TEXT_NODE) {\n    await processTextExpressions(node, context);\n  }\n\n  const children = !processChildren ? [] : [...node.childNodes];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    // eslint-disable-next-line no-await-in-loop\n    await processNode(child, context);\n  }\n}\n\n/**\n * Render a template\n * @param {Element} template the template to render\n * @param {Object} context the rendering context\n */\nexport async function renderTemplate(template, context) {\n  const templateClone = template.cloneNode(true);\n  await processNode(templateClone.content, context);\n\n  processUnwraps(templateClone.content);\n\n  return templateClone;\n}\n\n/**\n * transform the element, replacing it's children with the content from the template\n * @param {Element} el the element\n * @param {Element} template the template element\n * @param {Object} context the rendering context\n */\nexport async function renderElementWithTemplate(el, template, context) {\n  const rendered = await renderTemplate(template, context);\n  el.replaceChildren(rendered.content);\n}\n\n/**\n * Transform an element using an HTML template\n *\n * @param {Element} block the block element\n * @param {Object} context the rendering context\n */\nexport async function renderElement(el, context) {\n  const template = await resolveTemplate(context);\n\n  await renderElementWithTemplate(el, template, context);\n}\n\n/**\n * Transform a block using an HTML template\n *\n * @param {Element} block the block element\n * @param {Object} context the rendering context\n */\nexport async function renderBlock(block, context = {}) {\n  context.block = block;\n  context.blockName = block.dataset.blockName;\n  context.codeBasePath = context.codeBasePath || (window.hlx ? window.hlx.codeBasePath : '');\n\n  await renderElement(block, context);\n}\n"],
  "mappings": "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",
  "names": ["resolveTemplate", "context", "templateId", "template", "resp", "markup", "t", "name", "resolveExpression", "expression", "context", "resolved", "previousResolvedValue", "parts", "i", "part", "functionParams", "resolveExpressions", "str", "regexp", "promises", "match", "escapeChar", "promiseResults", "processTextExpressions", "node", "updated", "updatedText", "processAttributesDirective", "el", "context", "attrsExpression", "attrsData", "resolveExpression", "k", "v", "processAttributes", "attrPromises", "attrName", "updated", "updatedText", "resolveExpressions", "processTest", "testAttrName", "contextName", "testExpression", "testData", "testResult", "processContent", "contentExpression", "content", "textNode", "processRepeat", "repeatAttrName", "repeatExpression", "arr", "repeatedNodes", "key", "item", "i", "cloned", "repeatContext", "processNode", "afterEL", "node", "processInclude", "includeValue", "templatePath", "templateName", "path", "name", "includeContext", "renderElement", "resolveUnwrap", "unwrapExpression", "processUnwraps", "unwrapEl", "processNode", "node", "context", "processChildren", "processTest", "processRepeat", "processAttributes", "processContent", "processInclude", "resolveUnwrap", "processTextExpressions", "children", "i", "child", "renderTemplate", "template", "templateClone", "processUnwraps", "renderElementWithTemplate", "el", "rendered", "renderElement", "resolveTemplate", "renderBlock", "block"]
}
